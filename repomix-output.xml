This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
board/admin.py
board/apps.py
board/forms.py
board/migrations/0001_initial.py
board/migrations/0002_alter_post_author.py
board/migrations/0003_post_delete_password.py
board/models.py
board/templates/board/delete_confirm.html
board/templates/board/search_results.html
board/templates/board/search.html
board/templates/board/thread_create.html
board/templates/board/thread_detail.html
board/templates/board/thread_list.html
board/tests.py
board/urls.py
board/views.py
bulletin_board/asgi.py
bulletin_board/settings.py
bulletin_board/urls.py
bulletin_board/wsgi.py
manage.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="board/admin.py">
from django.contrib import admin
from .models import Thread, Post
@admin.register(Thread)
class ThreadAdmin(admin.ModelAdmin):
    list_display = ('id', 'title', 'created_at')
    search_fields = ('title',)
@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    list_display = ('id', 'thread', 'author', 'created_at')
    search_fields = ('content', 'author__username')
    list_filter = ('created_at',)
</file>

<file path="board/apps.py">
from django.apps import AppConfig


class BoardConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'board'
</file>

<file path="board/migrations/0001_initial.py">
# Generated by Django 5.1.7 on 2025-03-30 05:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='board.thread')),
            ],
        ),
    ]
</file>

<file path="board/migrations/0002_alter_post_author.py">
# Generated by Django 5.1.7 on 2025-04-03 15:43

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('board', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='post',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
    ]
</file>

<file path="board/migrations/0003_post_delete_password.py">
# Generated by Django 5.1.7 on 2025-04-16 15:30

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('board', '0002_alter_post_author'),
    ]

    operations = [
        migrations.AddField(
            model_name='post',
            name='delete_password',
            field=models.CharField(blank=True, max_length=128),
        ),
    ]
</file>

<file path="board/templates/board/delete_confirm.html">
<h2>本当にこの投稿を削除しますか？</h2>
<p>{{ post.content }}</p>
<form method="post">
    {% csrf_token %}
    <input type="password" name="delete_password" placeholder="削除用パスワード">
    <button type="submit">削除する</button>
</form>
</file>

<file path="board/tests.py">
from django.test import TestCase

# Create your tests here.
</file>

<file path="bulletin_board/asgi.py">
"""
ASGI config for bulletin_board project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bulletin_board.settings')

application = get_asgi_application()
</file>

<file path="bulletin_board/urls.py">
"""
URL configuration for bulletin_board project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path,include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('board.urls')),
]
</file>

<file path="bulletin_board/wsgi.py">
"""
WSGI config for bulletin_board project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bulletin_board.settings')

application = get_wsgi_application()
</file>

<file path="manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bulletin_board.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="board/templates/board/search_results.html">
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>検索結果 | たぬきち掲示板</title>
</head>
<body>
    <h1>掲示板検索</h1>

    <form method="get" action="{% url 'board:search' %}">
        {{ form.as_p }}
        <button type="submit" class="button">検索</button>
    </form>

    <h2>検索結果</h2>

    {% if threads %}
        <h3>スレッド</h3>
        <ul>
        {% for thread in threads %}
            <li>
                <a href="{% url 'board:thread_detail' thread_id=thread.id %}">{{ thread.title }}</a>
            </li>
        {% endfor %}
        </ul>
    {% endif %}

    {% if posts %}
        <h3>投稿</h3>
        <ul>
        {% for post in posts %}
            <li>{{ post.content }}（{{ post.created_at|date:"Y/m/d H:i" }}）</li>
        {% endfor %}
        </ul>
    {% endif %}

    {% if not threads and not posts %}
        <p>該当するスレッドや投稿が見つかりませんでした。</p>
    {% endif %}
</body>
</html>
<head>
    <meta charset="UTF-8">
    <link href="https://fonts.googleapis.com/css2?family=Rounded+Mplus+1c&display=swap" rel="stylesheet">
    <style>
        /* スタイルはここに */
        body {
          background-color: #F0F8FF;
          font-family: 'Rounded Mplus 1c', 'Noto Sans JP', sans-serif;
          text-align: center;
        }
        h1 {
          color: #3C8D7C;
        }
        h2 {
          color: #3c698d;
          font-size: 20px;
        }
        .thread-list {
          list-style: none;
          padding: 0;
        }
        .thread-item {
          background: #FFFFFF;
          margin: 10px auto;
          width: 300px;
          padding: 10px;
          border-radius: 15px;
          box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
        }
        .button {
          background-color: #3C8D7C;
          color: #fff;
          border: none;
          padding: 10px 20px;
          margin: 10px;
          border-radius: 30px;
          font-size: 16px;
          cursor: pointer;
          transition: all 0.3s;
        }
        .button:hover {
          background-color: #2E6B5A;
        }
        .button-link {
          background-color: #3C8D7C;
          color: #fff;
          border: none;
          padding: 3px 10px;
          margin: 5px;
          border-radius: 5px;
          font-size: 10px;
          cursor: pointer;
          transition: all 0.3s;
        }
        .button-link:hover {
          background-color: #2E6B5A;
        }
        /* フォーム全体のスタイル */
    form {
      background-color: #f9f8ff; /* 優しいパステルカラー */
      padding: 20px;
      border-radius: 10px; /* 丸みを帯びた角 */
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* 軽い影をつける */
      width: 100%;
      max-width: 500px;
      margin: 0 auto;
      font-family: 'Arial', sans-serif; /* フォントを可愛らしく */
    }

    /* フォームの各入力フィールド */
    form input, form select, form textarea {
      width: 100%;
      padding: 10px;
      border-radius: 5px; /* 丸い入力フィールド */
      border: 1px solid #ddd; /* 淡いボーダー */
      font-size: 14px;
      margin-bottom: 15px;
      transition: border 0.3s ease;
    }

    /* 入力フィールドがフォーカスされているとき */
    form input:focus, form select:focus, form textarea:focus {
      border-color: #ff7eb9; /* フォーカス時にピンク色に */
      outline: none;
    }

    /* ボタンのスタイル */
    form button {
      background-color: #ff7eb9; /* ピンク色のボタン */
      color: white;
      padding: 12px 20px;
      border: none;
      border-radius: 5px;
      font-size: 16px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    /* ボタンにホバー時のスタイル */
    form button:hover {
      background-color: #ff5a97; /* 少し暗くする */
    }

    /* フォームラベル */
    form label {
      font-size: 16px;
      font-weight: bold;
      margin-bottom: 8px;
      display: block;
      color: #555;
    }
    </style>
</head>
</file>

<file path="board/templates/board/thread_create.html">
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>スレッド作成だなも</title>
</head>
<body>
    <h1>スレッドを作成するだなも</h1>
    <form method="post">
        {% csrf_token %}
        <div class="form-field">
            <label for="{{ form.title.id_for_label }}">タイトルだなも！</label>
            {{ form.title }} 
        </div>
        <!-- {{ form.as_p }} -->
        <button class="button"type="submit">作成</button>
    </form>
    <p><a href="{% url 'board:thread_list' %}">スレッド一覧に戻る</a></p>
</body>
</html>
<style>
    body {
      background-color: #F0F8FF;
      font-family: 'Rounded Mplus 1c', 'Noto Sans JP', sans-serif;
      text-align: center;
    }
    h1 {
      color: #3C8D7C;
    }
    h2 {
      color: #3c698d;
      font-size: 20px;
    }
    .thread-list {
      list-style: none;
      padding: 0;
    }
    .thread-item {
      background: #FFFFFF;
      margin: 10px auto;
      width: 300px;
      padding: 10px;
      border-radius: 15px;
      box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
    }
    .button {
      background-color: #3C8D7C;
      color: #fff;
      border: none;
      padding: 10px 20px;
      margin: 10px;
      border-radius: 30px;
      font-size: 16px;
      cursor: pointer;
      transition: all 0.3s;
    }
    .button:hover {
      background-color: #2E6B5A;
    }
    .button-link {
      background-color: #3C8D7C;
      color: #fff;
      border: none;
      padding: 3px 10px;
      margin: 5px;
      border-radius: 5px;
      font-size: 10px;
      cursor: pointer;
      transition: all 0.3s;
    }
    .button-link:hover {
      background-color: #2E6B5A;
    }
    /* フォーム全体のスタイル */
    form {
      background-color: #f9f8ff; /* 優しいパステルカラー */
      padding: 20px;
      border-radius: 10px; /* 丸みを帯びた角 */
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* 軽い影をつける */
      width: 100%;
      max-width: 500px;
      margin: 0 auto;
      font-family: 'Arial', sans-serif; /* フォントを可愛らしく */
    }

    /* フォームの各入力フィールド */
    form input, form select, form textarea {
      width: 100%;
      padding: 10px;
      border-radius: 5px; /* 丸い入力フィールド */
      border: 1px solid #ddd; /* 淡いボーダー */
      font-size: 14px;
      margin-bottom: 15px;
      transition: border 0.3s ease;
    }

    /* 入力フィールドがフォーカスされているとき */
    form input:focus, form select:focus, form textarea:focus {
      border-color: #ff7eb9; /* フォーカス時にピンク色に */
      outline: none;
    }

    /* ボタンのスタイル */
    form button {
      background-color: #ff7eb9; /* ピンク色のボタン */
      color: white;
      padding: 12px 20px;
      border: none;
      border-radius: 5px;
      font-size: 16px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    /* ボタンにホバー時のスタイル */
    form button:hover {
      background-color: #ff5a97; /* 少し暗くする */
    }

    /* フォームラベル */
    form label {
      font-size: 16px;
      font-weight: bold;
      margin-bottom: 8px;
      display: block;
      color: #555;
    }
  </style>
</file>

<file path="bulletin_board/settings.py">
"""
Django settings for bulletin_board project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-zuch=!2l0rmc)=$jmn0iq2ck8et&hevz5rbl3m_tqeg3t1p#6c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'board',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bulletin_board.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bulletin_board.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
</file>

<file path="board/forms.py">
from django import forms
from .models import Post
from .models import Thread
from django import forms
class PostForm(forms.ModelForm):
      delete_password = forms.CharField(widget=forms.PasswordInput(), required=False, label="削除用パスワード")
      class Meta:
        model = Post
        fields = ['content', 'delete_password']
class ThreadForm(forms.ModelForm):
    class Meta:
        model = Thread
        fields = ['title']
class SearchForm(forms.Form):
    query = forms.CharField(max_length=100, required=False, label="検索")
</file>

<file path="board/models.py">
from django.db import models
from django.contrib.auth.models import User
class Thread(models.Model):
    title = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)
    def __str__(self):
        return self.title
class Post(models.Model):
    thread = models.ForeignKey(Thread, on_delete=models.CASCADE)
    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)  # ← ここ変更
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    delete_password = models.CharField(max_length=128, blank=True)
    def __str__(self):
        return f'{self.author.username if self.author else "匿名"}: {self.content[:20]}'
</file>

<file path="board/templates/board/search.html">
<!-- search_results.html -->
  <h1>掲示板検索</h1>
  <form method="get" action="{% url 'board:search' %}">
  {{ form.as_p }}
  <button class="button" type="submit" >検索!!!!</button>
  </form>
  <head>
    <meta charset="UTF-8">
    <link href="https://fonts.googleapis.com/css2?family=Rounded+Mplus+1c&display=swap" rel="stylesheet">
    <style>
        /* スタイルはここに */
        body {
          background-color: #F0F8FF;
          font-family: 'Rounded Mplus 1c', 'Noto Sans JP', sans-serif;
          text-align: center;
        }
        h1 {
          color: #3C8D7C;
        }
        h2 {
          color: #3c698d;
          font-size: 20px;
        }
        .thread-list {
          list-style: none;
          padding: 0;
        }
        .thread-item {
          background: #FFFFFF;
          margin: 10px auto;
          width: 300px;
          padding: 10px;
          border-radius: 15px;
          box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
        }
        .button {
          background-color: #3C8D7C;
          color: #fff;
          border: none;
          padding: 10px 20px;
          margin: 10px;
          border-radius: 30px;
          font-size: 16px;
          cursor: pointer;
          transition: all 0.3s;
        }
        .button:hover {
          background-color: #2E6B5A;
        }
        .button-link {
          background-color: #3C8D7C;
          color: #fff;
          border: none;
          padding: 3px 10px;
          margin: 5px;
          border-radius: 5px;
          font-size: 10px;
          cursor: pointer;
          transition: all 0.3s;
        }
        .button-link:hover {
          background-color: #2E6B5A;
        }
    </style>
</head>
  <!-- </div><form action="{% url 'board:tanukiti' %}" method="get">
    <button class="button-link" type="submit">たぬきちページへ</button>
</form> -->
</file>

<file path="board/templates/board/thread_detail.html">
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>{{ thread.title }} - たぬきち掲示板だなも！</title>
    <link href="https://fonts.googleapis.com/css2?family=Rounded+Mplus+1c&display=swap" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(to bottom, #D0F4DE, #FFF8E1);
            font-family: 'Rounded Mplus 1c', sans-serif;
            text-align: center;
            margin: 0;
            padding: 20px;
        }
        h1 {
            color: #3C8D7C;
        }
        .post-card {
            background-color: #FFF8E1;
            margin: 10px auto;
            padding: 15px;
            width: 80%;
            max-width: 500px;
            border-radius: 15px;
            box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2);
            text-align: left;
        }
        .post-meta {
            font-size: 12px;
            color: #777;
            margin-bottom: 5px;
        }
        form {
            margin-top: 30px;
        }
        textarea, input[type="text"] {
            width: 80%;
            max-width: 500px;
            padding: 10px;
            border-radius: 10px;
            border: 1px solid #ccc;
            font-size: 16px;
            font-family: inherit;
        }
        .button {
            background-color: #3C8D7C;
            color: #fff;
            border: none;
            padding: 10px 20px;
            margin: 10px;
            border-radius: 30px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .button:hover {
            background-color: #2E6B5A;
        }
        .back-link {
            margin-top: 20px;
            display: inline-block;
            text-decoration: none;
            color: #3C8D7C;
        }
    </style>
</head>
<body>
    <h1>:🌿: {{ thread.title|safe }} :🌿:</h1>
    {% for post in posts %}
        <div class="post-card">
            <div class="post-meta">
                {{ post.author.username|default:"匿名" }} - {{ post.created_at|date:"Y/m/d H:i" }}
            </div>
            <div>{{ post.content }}</div>

            {% if user == post.author %}
            <form method="post" action="{% url 'delete_post' post.id %}" style="display:inline;">
                {% csrf_token %}
                <button type="submit" onclick="return confirm('本当に削除しますか？')">削除</button>
            </form>
            {% endif %}
        </div>
    {% empty %}
        <p>まだ投稿がないだなも。</p>
    {% endfor %}
    <h2>投稿するだなも :メモ:</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="button">投稿！</button>
    </form>
    <a href="{% url 'board:thread_list' %}" class="back-link">← スレッド一覧にもどるだなも</a>
</body>
</html>
<style>
        body {
          background-color: #F0F8FF;
          font-family: 'Rounded Mplus 1c', 'Noto Sans JP', sans-serif;
          text-align: center;
        }
        h1 {
          color: #3C8D7C;
        }
        h2 {
          color: #3c698d;
          font-size: 20px;
        }
        .thread-list {
          list-style: none;
          padding: 0;
        }
        .thread-item {
          background: #FFFFFF;
          margin: 10px auto;
          width: 300px;
          padding: 10px;
          border-radius: 15px;
          box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
        }
        .button {
          background-color: #3C8D7C;
          color: #fff;
          border: none;
          padding: 10px 20px;
          margin: 10px;
          border-radius: 30px;
          font-size: 16px;
          cursor: pointer;
          transition: all 0.3s;
        }
        .button:hover {
          background-color: #2E6B5A;
        }
        .button-link {
          background-color: #3C8D7C;
          color: #fff;
          border: none;
          padding: 3px 10px;
          margin: 5px;
          border-radius: 5px;
          font-size: 10px;
          cursor: pointer;
          transition: all 0.3s;
        }
        .button-link:hover {
          background-color: #2E6B5A;
        }
      </style>
      <form method="post" action="{% url 'delete_post' post.id %}">
        {% csrf_token %}
        <input type="password" name="delete_password" placeholder="削除用パスワード">
        <button type="submit">削除</button>
    </form>
</file>

<file path="board/templates/board/thread_list.html">
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>たぬきちの里</title>
    <link href="https://fonts.googleapis.com/css2?family=Rounded+Mplus+1c&display=swap" rel="stylesheet">
    <style>
        /* スタイルはここに */
        body {
          background-color: #F0F8FF;
          font-family: 'Rounded Mplus 1c', 'Noto Sans JP', sans-serif;
          text-align: center;
        }
        h1 {
          color: #3C8D7C;
        }
        h2 {
          color: #3c698d;
          font-size: 20px;
        }
        .thread-list {
          list-style: none;
          padding: 0;
        }
        .thread-item {
          background: #FFFFFF;
          margin: 10px auto;
          width: 300px;
          padding: 10px;
          border-radius: 15px;
          box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
        }
        .button {
          background-color: #3C8D7C;
          color: #fff;
          border: none;
          padding: 10px 20px;
          margin: 10px;
          border-radius: 30px;
          font-size: 16px;
          cursor: pointer;
          transition: all 0.3s;
        }
        .button:hover {
          background-color: #2E6B5A;
        }
        .button-link {
          background-color: #3C8D7C;
          color: #fff;
          border: none;
          padding: 3px 10px;
          margin: 5px;
          border-radius: 5px;
          font-size: 10px;
          cursor: pointer;
          transition: all 0.3s;
        }
        .button-link:hover {
          background-color: #2E6B5A;
        }
    </style>
</head>
<body>
    <h1> 🦝たぬきちの掲示板だなも🦝</h1>
    
    <form action="{% url 'board:thread_create' %}" method="get">
        <button class="button" type="submit">+ 新しいスレッドを作る</button>
    </form>

    <h2>スレッド一覧だなも</h2>
    <ul class="thread-list">
        {% for thread in threads %}
            <li class="thread-item">
                <a href="{% url 'board:thread_detail' thread_id=thread.id %}">
                    {{ thread.title }}
                </a><br>
                <small>{{ thread.created_at|date:"Y/m/d H:i" }}</small>
            </li>
        {% empty %}
            <li>まだスレッドがないだなも。</li>
        {% endfor %}
    </ul>

    <a href="{% url 'board:hello' %}" class="button-link">Helloページへ</a>
    <a href="{% url 'board:tanukiti' %}" class="button-link">たぬきちページへ</a>

    <!-- 検索フォームを表示したい場合 -->
    {% include "board/search.html" %}
</body>
</html>
</file>

<file path="board/views.py">
from django.http import HttpResponse
from django.shortcuts import render, redirect, get_object_or_404
from .models import Thread, Post
from .forms import ThreadForm, PostForm, SearchForm
from .forms import SearchForm
def thread_list(request):
    print('メインぺージを読み込むだなも！')
    message = "たぬきちの掲示板へようこそだなも！"
    print(message)
    threads = Thread.objects.all().order_by('-created_at')
    return render(request, 'board/thread_list.html', {'threads': threads, 'message': message})

def hello(request):
    return HttpResponse("たぬきちのHello Worldだなも！")
def tanukiti(request):
    return HttpResponse("まなはたぬきちだなも")

def thread_create(request):
    if request.method == 'POST':
        form = ThreadForm(request.POST)
        if form.is_valid():
            thread = form.save()
            return redirect('board:thread_detail', thread_id=thread.id)
    else:
        form = ThreadForm()
    return render(request, 'board/thread_create.html', {'form': form})

def thread_detail(request, thread_id):
    thread = get_object_or_404(Thread, id=thread_id)
    posts = Post.objects.filter(thread=thread).order_by('created_at')
    if request.method == 'POST':
        form = PostForm(request.POST)
        if form.is_valid():
            post = form.save(commit=False)
            post.thread = thread
            post.author = request.user if request.user.is_authenticated else None
            post.save()
            return redirect('board:thread_detail', thread_id=thread.id)
    else:
        form = PostForm()
    return render(request, 'board/thread_detail.html', {
        'thread': thread,
        'posts': posts,
        'form': form,
        
    })
def search(request):
    form = SearchForm(request.GET)
    threads = Thread.objects.all()
    posts = Post.objects.all()

    if form.is_valid():
        query = form.cleaned_data['query']
        if query:
            # スレッドタイトルと投稿内容を検索
            threads = threads.filter(title__icontains=query)
            posts = posts.filter(content__icontains=query)
    return render(request, 'board/search_results.html', {'form': form, 'threads': threads, 'posts': posts})

def search_results(request):
    return render(request, 'board/search_results.html')
def delete_post(request, post_id):
    post = get_object_or_404(Post, id=post_id)

    if request.method == 'POST':
        input_password = request.POST.get('delete_password')
        if input_password == post.delete_password:
            thread_id = post.thread.id
            post.delete()
            return redirect('thread_detail', thread_id=thread_id)
        else:
            return HttpResponseForbidden("パスワードが違います")

    return render(request, 'board/delete_confirm.html', {'post': post})
</file>

<file path="board/urls.py">
from django.urls import path
from . import views
from django.contrib import admin
app_name = 'board'
urlpatterns = [
    path('', views.thread_list, name='thread_list'),
    path('hello/', views.hello, name='hello'),
    path('tanukiti/', views.tanukiti, name='tanukiti'),
    path('thread/<int:thread_id>/', views.thread_detail, name='thread_detail'),  # ←追加
    path('thread/create/', views.thread_create, name='thread_create'),  # ←追加
    path('search/', views.search, name='search'),
    path('search_results/', views.search_results, name='search_results'),
    path('admin/', admin.site.urls),
    path('delete_post/<int:post_id>/', views.delete_post, name='delete_post'),
]
</file>

</files>
